import json

class StudentRecordManager:
    def __init__(self):
        self.records = {}
        self.filename = None
    
    def load_file(self, filename):
        try:
            with open(filename, 'r') as file:
                self.records = json.load(file)
            self.filename = filename
            print("File loaded successfully.")
        except FileNotFoundError:
            print("File not found.")
        except json.JSONDecodeError:
            print("Error reading file.")

    def save_file(self):
        if self.filename:
            with open(self.filename, 'w') as file:
                json.dump(self.records, file, indent=4)
            print("File saved successfully.")
        else:
            print("No file opened. Use 'Save As' to specify a filename.")
    
    def save_as_file(self, filename):
        with open(filename, 'w') as file:
            json.dump(self.records, file, indent=4)
        self.filename = filename
        print("File saved successfully as", filename)

    def show_all_records(self):
        for student_id, record in self.records.items():
            print(student_id, record)
    
    def order_by_last_name(self):
        sorted_records = sorted(self.records.items(), key=lambda x: x[1]['name'][1])
        for student_id, record in sorted_records:
            print(student_id, record)
    
    def order_by_grade(self):
        sorted_records = sorted(self.records.items(), key=lambda x: (0.6 * x[1]['class_standing'] + 0.4 * x[1]['major_exam']), reverse=True)
        for student_id, record in sorted_records:
            print(student_id, record)
    
    def show_student_record(self, student_id):
        if student_id in self.records:
            print(self.records[student_id])
        else:
            print("Student not found.")
    
    def add_record(self, student_id, first_name, last_name, class_standing, major_exam):
        if student_id in self.records:
            print("Student ID already exists.")
            return
        self.records[student_id] = {
            "name": (first_name, last_name),
            "class_standing": class_standing,
            "major_exam": major_exam
        }
        print("Record added successfully.")
    
    def edit_record(self, student_id, first_name=None, last_name=None, class_standing=None, major_exam=None):
        if student_id in self.records:
            if first_name:
                self.records[student_id]['name'] = (first_name, self.records[student_id]['name'][1])
            if last_name:
                self.records[student_id]['name'] = (self.records[student_id]['name'][0], last_name)
            if class_standing is not None:
                self.records[student_id]['class_standing'] = class_standing
            if major_exam is not None:
                self.records[student_id]['major_exam'] = major_exam
            print("Record updated successfully.")
        else:
            print("Student not found.")
    
    def delete_record(self, student_id):
        if student_id in self.records:
            del self.records[student_id]
            print("Record deleted successfully.")
        else:
            print("Student not found.")

if __name__ == "__main__":
    manager = StudentRecordManager()
    while True:
        print("\nMenu:")
        print("1. Open File")
        print("2. Save File")
        print("3. Save As File")
        print("4. Show All Students Record")
        print("5. Order by Last Name")
        print("6. Order by Grade")
        print("7. Show Student Record")
        print("8. Add Record")
        print("9. Edit Record")
        print("10. Delete Record")
        print("11. Exit")
        
        choice = input("Enter choice: ")
        if choice == '1':
            filename = input("Enter filename: ")
            manager.load_file(filename)
        elif choice == '2':
            manager.save_file()
        elif choice == '3':
            filename = input("Enter filename to save as: ")
            manager.save_as_file(filename)
        elif choice == '4':
            manager.show_all_records()
        elif choice == '5':
            manager.order_by_last_name()
        elif choice == '6':
            manager.order_by_grade()
        elif choice == '7':
            student_id = input("Enter student ID: ")
            manager.show_student_record(student_id)
        elif choice == '8':
            student_id = input("Enter student ID (6-digit number): ")
            first_name = input("Enter first name: ")
            last_name = input("Enter last name: ")
            class_standing = float(input("Enter class standing grade: "))
            major_exam = float(input("Enter major exam grade: "))
            manager.add_record(student_id, first_name, last_name, class_standing, major_exam)
        elif choice == '9':
            student_id = input("Enter student ID: ")
            first_name = input("Enter new first name (leave blank to keep current): ") or None
            last_name = input("Enter new last name (leave blank to keep current): ") or None
            class_standing = input("Enter new class standing grade (leave blank to keep current): ")
            major_exam = input("Enter new major exam grade (leave blank to keep current): ")
            
            class_standing = float(class_standing) if class_standing else None
            major_exam = float(major_exam) if major_exam else None
            
            manager.edit_record(student_id, first_name, last_name, class_standing, major_exam)
        elif choice == '10':
            student_id = input("Enter student ID: ")
            manager.delete_record(student_id)
        elif choice == '11':
            print("Exiting program.")
            break
        else:
            print("Invalid choice. Try again.")
